// @ts-check
'use strict'

// Сделать рандомизацию шагов (если не попадает в радиус сканирования)
// Увеличить радиус сканирования (должен задаваься при создании клетки)
// Добавить препятсятвия
// Научить обходить препятствия
// Научить ходить по кратчайшему пути к еде
// Научить выбирать лучшую еду в зависимости от расстояния
// Сделать генератор еды на карте

function Cell(posX, posY, energy, scanRad, space) {
  const self = this

  this.posX = posX
  this.posY = posY
  this.energy = energy
  this.space = space
  this.scanRad = scanRad

  this.space[this.posY][this.posX] = 'Q'

  this.lookArrItems = []
  this.lookArrCord = []
  this.filteredLookArrCord = []
  this.foodCord = []
  this.bestFood = 0

  // Сканирует область в заданом радиусе одной клетки
  function look() {
    for (let i = -self.scanRad; i < self.scanRad + 1; i++) {
      for (let j = -self.scanRad; j < self.scanRad + 1; j++) {
        if (i == 0 && j == 0) continue
        self.lookArrCord.push([self.posY + i, self.posX + j])
      }
    }

    //console.log('lookArrCord', self.lookArrCord)
  }

  // Опеделяет, что находится в радиусе сканирования
  function findItems() {
    let halffilteredlookArrCord = self.lookArrCord.filter(e => e.every(e => e >= 0))

    //console.log('tmpfilteredlookArrCord', halffilteredlookArrCord)

    for (let i = 0; i < halffilteredlookArrCord.length; i++) {
      if (self.lookArrCord[i][0] < space.length && self.lookArrCord[i][1] < space[0].length) {
        self.filteredLookArrCord.push(halffilteredlookArrCord[i])
      }
    }

    //console.log('filteredLookArrCord', self.filteredLookArrCord)

    for (let i = 0; i < self.filteredLookArrCord.length; i++) {
      self.lookArrItems.push(space[self.filteredLookArrCord[i][0]][self.filteredLookArrCord[i][1]])
    }

    //console.log('self.lookArrItems', self.lookArrItems)
  }

  // Находит наибольшую еду и кладет ее в переменную self.bestFood
  function findbestFood() {
    self.bestFood = Math.max.apply(0, self.lookArrItems.filter(e => +e))

    //console.log('self.bestFood', self.bestFood)
  }

  // Находит координату еды
  function findBestFoodCord() {
    if (self.bestFood != -Infinity) {
      self.foodCord = self.filteredLookArrCord[self.lookArrItems.indexOf(self.bestFood + '')]
    } else {
      self.foodCord = self.filteredLookArrCord[Math.floor(Math.random() * self.filteredLookArrCord.length)]
    }

    //console.log('self.foodCord', self.foodCord)
  }

  // Передвигает клетку к еде, изменяет текущие координаты, добавляет энергию
  function move() {
    self.space[self.posY][self.posX] = '-'
    self.space[self.foodCord[0]][self.foodCord[1]] = 'Q'

    self.posY = self.foodCord[0]
    self.posX = self.foodCord[1]

    self.energy += self.bestFood == -Infinity ? 0 : self.bestFood
  }

  // Снижает энергию и проверяет не закончилась ли она
  function checkDeath() {
    self.energy -= 1 // Снижение енергии на 1 за ход
    if (self.energy === 0) self.energy = "DEAD"
  }

  // Очищает переменные
  function clearInfo() {
    self.lookArrItems = []
    self.lookArrCord = []
    self.filteredLookArrCord = []
    self.foodCord = []
    self.bestFood = 0
  }

  // Выводит данные в консоль
  this.console = function () {
    console.clear()
    console.log('Поле: ', self.space)
    console.log('Массив координат сканирования: ', self.lookArrCord)
    console.log('Массив элементов сканирования: ', self.lookArrItems)
    console.log('Координаты лучшей еды: ', self.foodCord)
    console.log('Текущая энергия: ', self.energy)
  }

  // Запускаяет 1 жизненный круг
  this.live = function () {
    look()
    findItems()
    findbestFood()
    findBestFoodCord()
    move()
		checkDeath()
		this.console()
    clearInfo()
  }
}

/*
   X ----- стена
   - ----- пустая ячейка
   Q ----- персонаж
   1 - 4 - энергия


   [ [ '-', '-', '1', '-', '-', '2', 'X', '-', '-', '-' ],
     [ '-', '3', '-', '1', '-', '-', 'X', '-', '-', '-' ],
     [ '-', '-', 'X', '-', 'Q', '-', 'X', '-', '2', '-' ],
     [ '-', '4', 'X', '-', '-', '4', '-', '-', '-', '-' ],
     [ '4', '-', 'X', '4', '-', '-', '-', '3', '-', '1' ] ]

*/

let firstSpace = [
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
]

let secondSpace = [
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '3', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '2', '-', '-', '4', '-', '-', '3', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '4', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '3', '-', '-', '-', '-', '1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '4', '2', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '4', '-', '-', '1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '2', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '4', '-', '3', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
]

let thirdSpace = [
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '3', '1', '-', '3', '2', '-', '3', '-', '-', '-', '-', '3', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '2', '-', '-', '4', '-', '-', '3', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '2', '-', '-', '-', '-', '-', '-', '-', '4', '-', '-', '-'],
  ['-', '-', '2', '-', '-', '-', '-', '4', '-', '-', '-', '3', '-', '-', '-', '-', '1', '-'],
  ['-', '-', '-', '-', '2', '-', '-', '-', '-', '4', '2', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '4', '-', '-', '1', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '2', '-'],
  ['-', '-', '1', '-', '-', '-', '4', '-', '-', '-', '4', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '3', '-', '-', '-', '3', '-', '-', '-', '-', '4', '-', '3', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '4', '-', '-', '4', '-', '4', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
]

let cell = new Cell(17, 16, 10, 3, thirdSpace)
